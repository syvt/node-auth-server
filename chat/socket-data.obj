Socket {
    nsp: 
     Namespace {
       name: '/',
       server: 
        Server {
          nsps: [Object],
          parentNsps: Map {},
          _path: '/socket.io',
          _serveClient: true,
          parser: [Object],
          encoder: Encoder {},
          _adapter: [Function: Adapter],
          _origins: '*:*',
          sockets: [Circular],
          eio: [Object],
          httpServer: [Object],
          engine: [Object] },
       sockets: {},
       connected: {},
       fns: [ [Function: verify] ],
       ids: 0,
       rooms: [],
       flags: {},
       adapter: Adapter { nsp: [Circular], rooms: {}, sids: {}, encoder: Encoder {} },
       _events: { connection: [Function: root] },
       _eventsCount: 1 },
    server: 
     Server {
       nsps: { '/': [Object], '/test': [Object] },
       parentNsps: Map {},
       _path: '/socket.io',
       _serveClient: true,
       parser: 
        { protocol: 4,
          types: [Array],
          CONNECT: 0,
          DISCONNECT: 1,
          EVENT: 2,
          ACK: 3,
          ERROR: 4,
          BINARY_EVENT: 5,
          BINARY_ACK: 6,
          Encoder: [Function: Encoder],
          Decoder: [Function: Decoder] },
       encoder: Encoder {},
       _adapter: [Function: Adapter],
       _origins: '*:*',
       sockets: 
        Namespace {
          name: '/',
          server: [Circular],
          sockets: {},
          connected: {},
          fns: [Array],
          ids: 0,
          rooms: [],
          flags: {},
          adapter: [Object],
          _events: [Object],
          _eventsCount: 1 },
       eio: 
        Server {
          clients: [Object],
          clientsCount: 1,
          wsEngine: 'ws',
          pingTimeout: 5000,
          pingInterval: 2000,
          upgradeTimeout: 10000,
          maxHttpBufferSize: 100000000,
          transports: [Array],
          allowUpgrades: true,
          allowRequest: [Function: bound ],
          cookie: 'io',
          cookiePath: '/',
          cookieHttpOnly: true,
          perMessageDeflate: [Object],
          httpCompression: [Object],
          ws: [Object],
          _events: [Object],
          _eventsCount: 1 },
       httpServer: 
        Server {
          domain: null,
          _events: [Object],
          _eventsCount: 5,
          _maxListeners: undefined,
          _connections: 1,
          _handle: [Object],
          _usingSlaves: false,
          _slaves: [],
          _unref: false,
          allowHalfOpen: true,
          pauseOnConnect: false,
          httpAllowHalfOpen: false,
          timeout: 120000,
          keepAliveTimeout: 5000,
          _pendingResponseData: 0,
          maxHeadersCount: null,
          _connectionKey: '6::::9235',
          [Symbol(asyncId)]: 8 },
       engine: 
        Server {
          clients: [Object],
          clientsCount: 1,
          wsEngine: 'ws',
          pingTimeout: 5000,
          pingInterval: 2000,
          upgradeTimeout: 10000,
          maxHttpBufferSize: 100000000,
          transports: [Array],
          allowUpgrades: true,
          allowRequest: [Function: bound ],
          cookie: 'io',
          cookiePath: '/',
          cookieHttpOnly: true,
          perMessageDeflate: [Object],
          httpCompression: [Object],
          ws: [Object],
          _events: [Object],
          _eventsCount: 1 } },
    adapter: 
     Adapter {
       nsp: 
        Namespace {
          name: '/',
          server: [Object],
          sockets: {},
          connected: {},
          fns: [Array],
          ids: 0,
          rooms: [],
          flags: {},
          adapter: [Circular],
          _events: [Object],
          _eventsCount: 1 },
       rooms: {},
       sids: {},
       encoder: Encoder {} },
    id: 'zcVJUe2FdtO4Oz0xAAAA',
    client: 
     Client {
       server: 
        Server {
          nsps: [Object],
          parentNsps: Map {},
          _path: '/socket.io',
          _serveClient: true,
          parser: [Object],
          encoder: Encoder {},
          _adapter: [Function: Adapter],
          _origins: '*:*',
          sockets: [Object],
          eio: [Object],
          httpServer: [Object],
          engine: [Object] },
       conn: 
        Socket {
          id: 'zcVJUe2FdtO4Oz0xAAAA',
          server: [Object],
          upgrading: false,
          upgraded: false,
          readyState: 'open',
          writeBuffer: [],
          packetsFn: [],
          sentCallbackFn: [],
          cleanupFn: [Array],
          request: [Object],
          remoteAddress: '::1',
          checkIntervalTimer: null,
          upgradeTimeoutTimer: null,
          pingTimeoutTimer: [Object],
          transport: [Object],
          _events: [Object],
          _eventsCount: 3 },
       encoder: Encoder {},
       decoder: Decoder { reconstructor: null, _callbacks: [Object] },
       id: 'zcVJUe2FdtO4Oz0xAAAA',
       request: 
        IncomingMessage {
          _readableState: [Object],
          readable: true,
          domain: null,
          _events: {},
          _eventsCount: 0,
          _maxListeners: undefined,
          socket: [Object],
          connection: [Object],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: false,
          headers: [Object],
          rawHeaders: [Array],
          trailers: {},
          rawTrailers: [],
          upgrade: false,
          url: '/socket.io/?EIO=3&transport=polling&t=MUrXe1d',
          method: 'GET',
          statusCode: null,
          statusMessage: null,
          client: [Object],
          _consuming: false,
          _dumped: false,
          _query: [Object],
          res: [Object],
          cleanup: [Function: cleanup] },
       onclose: [Function: bound ],
       ondata: [Function: bound ],
       onerror: [Function: bound ],
       ondecoded: [Function: bound ],
       sockets: {},
       nsps: {},
       connectBuffer: [] },
    conn: 
     Socket {
       id: 'zcVJUe2FdtO4Oz0xAAAA',
       server: 
        Server {
          clients: [Object],
          clientsCount: 1,
          wsEngine: 'ws',
          pingTimeout: 5000,
          pingInterval: 2000,
          upgradeTimeout: 10000,
          maxHttpBufferSize: 100000000,
          transports: [Array],
          allowUpgrades: true,
          allowRequest: [Function: bound ],
          cookie: 'io',
          cookiePath: '/',
          cookieHttpOnly: true,
          perMessageDeflate: [Object],
          httpCompression: [Object],
          ws: [Object],
          _events: [Object],
          _eventsCount: 1 },
       upgrading: false,
       upgraded: false,
       readyState: 'open',
       writeBuffer: [],
       packetsFn: [],
       sentCallbackFn: [],
       cleanupFn: [ [Function], [Function] ],
       request: 
        IncomingMessage {
          _readableState: [Object],
          readable: true,
          domain: null,
          _events: {},
          _eventsCount: 0,
          _maxListeners: undefined,
          socket: [Object],
          connection: [Object],
          httpVersionMajor: 1,
          httpVersionMinor: 1,
          httpVersion: '1.1',
          complete: false,
          headers: [Object],
          rawHeaders: [Array],
          trailers: {},
          rawTrailers: [],
          upgrade: false,
          url: '/socket.io/?EIO=3&transport=polling&t=MUrXe1d',
          method: 'GET',
          statusCode: null,
          statusMessage: null,
          client: [Object],
          _consuming: false,
          _dumped: false,
          _query: [Object],
          res: [Object],
          cleanup: [Function: cleanup] },
       remoteAddress: '::1',
       checkIntervalTimer: null,
       upgradeTimeoutTimer: null,
       pingTimeoutTimer: 
        Timeout {
          _called: false,
          _idleTimeout: 7000,
          _idlePrev: [Object],
          _idleNext: [Object],
          _idleStart: 4946,
          _onTimeout: [Function],
          _timerArgs: undefined,
          _repeat: null,
          _destroyed: false,
          [Symbol(asyncId)]: 29,
          [Symbol(triggerAsyncId)]: 25 },
       transport: 
        XHR {
          readyState: 'open',
          discarded: false,
          closeTimeout: 30000,
          maxHttpBufferSize: 100000000,
          httpCompression: [Object],
          supportsBinary: true,
          _events: [Object],
          _eventsCount: 5,
          sid: 'zcVJUe2FdtO4Oz0xAAAA',
          req: null,
          res: null,
          writable: false },
       _events: 
        { close: [Array],
          data: [Function: bound ],
          error: [Function: bound ] },
       _eventsCount: 3 },
    rooms: {},
    acks: {},
    connected: true,
    disconnected: false,
    handshake: 
     { headers: 
        { host: 'localhost:9235',
          connection: 'keep-alive',
          accept: '*/*',
          origin: 'http://localhost:8100',
          'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.80 Safari/537.36',
          referer: 'http://localhost:8100/',
          'accept-encoding': 'gzip, deflate, br',
          'accept-language': 'en-US,en;q=0.9,vi;q=0.8',
          cookie: '__RC=31; __R=2; __tb=0; _ga=GA1.1.742425040.1542376148; __UF=-1; __IP=2064868297; io=XIf5E_QixrwamCsMAAAA' },
       time: 'Sun Dec 16 2018 12:39:10 GMT+0700 (+07)',
       address: '::1',
       xdomain: true,
       secure: false,
       issued: 1544938750074,
       url: '/socket.io/?EIO=3&transport=polling&t=MUrXe1d',
       query: { EIO: '3', transport: 'polling', t: 'MUrXe1d' } },
    fns: [],
    flags: {},
    _rooms: [] }